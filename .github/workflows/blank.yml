name: VM-Server

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'OS ISO?'
        required: true
        default: 'https://software-download.microsoft.com/db/Win11_22H2_English_x64.iso'
      vm_name:
        description: 'Name of the VM/disk'
        required: true
        default: 'windowsserver'
      vcpus:
        description: 'Number of vCPUs'
        required: true
        default: '4'
      ram:
        description: 'RAM in GB'
        required: true
        default: '16'
      disk:
        description: 'Disk size in GB'
        required: true
        default: '256'
      telegram_bot_token:
        description: 'Telegram Bot Token'
        required: true
      telegram_chat_id:
        description: 'Telegram Chat ID'
        required: true

jobs:
  run-vm:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ github.event.inputs.telegram_bot_token }}
      TELEGRAM_CHAT_ID: ${{ github.event.inputs.telegram_chat_id }}

    steps:
      - name: Send Start Info
        run: |
          ISO="${{ github.event.inputs.iso_url }}"
          VM_NAME="${{ github.event.inputs.vm_name }}"
          VCPUS="${{ github.event.inputs.vcpus }}"
          RAM="${{ github.event.inputs.ram }}"
          DISK="${{ github.event.inputs.disk }}"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üöÄ Starting VM Setup
OS ISO: $ISO
VM Name: $VM_NAME
vCPUs: $VCPUS
RAM: $RAM GB
Disk: $DISK GB (NVMe)"

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 ovmf curl novnc websockify
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Download Windows ISO
        run: |
          VM_NAME="${{ github.event.inputs.vm_name }}"
          ISO="${{ github.event.inputs.iso_url }}"
          wget -O "${VM_NAME}.iso" "$ISO"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚úÖ ISO downloaded."

      - name: Create Disk
        run: |
          VM_NAME="${{ github.event.inputs.vm_name }}"
          DISK="${{ github.event.inputs.disk }}"
          qemu-img create -f qcow2 "${VM_NAME}.qcow2" "${DISK}G"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üì¶ Virtual NVMe disk created (${DISK}G)."

      - name: Start Tailscale
        run: |
          VM_NAME="${{ github.event.inputs.vm_name }}"
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
          sleep 5
          sudo tailscale up --authkey=$TAILSCALE_AUTHKEY --hostname="$VM_NAME" --accept-routes
          TS_IP=$(tailscale ip -4 | head -n 1)
          echo "TAILSCALE_IP=$TS_IP" >> $GITHUB_ENV
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üîå Tailscale connected: $TS_IP"

      - name: Launch VM and Hold Job
        run: |
          VM_NAME="${{ github.event.inputs.vm_name }}"
          VCPUS="${{ github.event.inputs.vcpus }}"
          RAM="${{ github.event.inputs.ram }}"

          if [ -f /usr/share/OVMF/OVMF_CODE_4M.fd ]; then
            CODE_PATH=/usr/share/OVMF/OVMF_CODE_4M.fd
            VARS_PATH=/usr/share/OVMF/OVMF_VARS_4M.fd
          else
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_CODE.fd -O OVMF_CODE.fd
            wget -q https://github.com/tianocore/edk2/releases/download/edk2-stable202307/OVMF_VARS.fd -O OVMF_VARS.fd
            CODE_PATH=./OVMF_CODE.fd
            VARS_PATH=./OVMF_VARS.fd
          fi

          sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host \
            -smp "$VCPUS" \
            -m $((RAM*1024))M \
            -drive if=pflash,format=raw,readonly=on,file="$CODE_PATH" \
            -drive if=pflash,format=raw,file="$VARS_PATH" \
            -drive file="${VM_NAME}.qcow2",format=qcow2,if=none,id=nvme_disk \
            -device nvme,drive=nvme_disk,serial=deadbeef \
            -cdrom "${VM_NAME}.iso" \
            -boot d \
            -vnc :0 \
            -netdev user,id=net0,hostfwd=tcp::3389-:3389 \
            -device e1000,netdev=net0 \
            -device usb-ehci,id=ehci \
            -device usb-tablet,bus=ehci.0 &

          sleep 10

          nohup websockify --web=/usr/share/novnc 6080 localhost:5900 &

          # Use bash variable only
          VNC_LINK="http://$TAILSCALE_IP:6080/vnc.html"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üöÄ VM Started!
Tailscale IP: $TAILSCALE_IP
noVNC: $VNC_LINK
Owner: @Danielreal64"

          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚è≥ Workflow will remain active for 5 hours..."

          timeout 18000 bash -c "while true; do sleep 30; done"
